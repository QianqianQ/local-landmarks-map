{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as L from 'leaflet';\nimport 'leaflet.markercluster';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/landmarks.service\";\nimport * as i2 from \"../../services/geolocation.service\";\nconst _c0 = [\"mapContainer\"];\nexport let MapComponent = /*#__PURE__*/(() => {\n  class MapComponent {\n    constructor(landmarksService, geolocationService) {\n      this.landmarksService = landmarksService;\n      this.geolocationService = geolocationService;\n      this.landmarkCountChanged = new EventEmitter();\n      this.currentLandmarks = [];\n      this.isLoading = false;\n      this.isLoadingVisible = false;\n      this.isErrorVisible = false;\n      this.errorMessage = '';\n      this.landmarkCount = 0;\n    }\n    ngOnInit() {\n      // Fix for default markers in Leaflet\n      delete L.Icon.Default.prototype._getIconUrl;\n      L.Icon.Default.mergeOptions({\n        iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png',\n        iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',\n        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png'\n      });\n    }\n    ngAfterViewInit() {\n      this.initializeMap();\n      this.setupEventListeners();\n    }\n    initializeMap() {\n      // Create map centered on New York City by default\n      this.map = L.map(this.mapContainer.nativeElement).setView([40.7128, -74.0060], 13);\n      // Add OpenStreetMap tiles\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '© OpenStreetMap contributors',\n        maxZoom: 18\n      }).addTo(this.map);\n      // Initialize marker cluster group\n      this.markersGroup = L.markerClusterGroup({\n        chunkedLoading: true,\n        maxClusterRadius: 50\n      });\n      this.map.addLayer(this.markersGroup);\n      // Set up map event listeners\n      this.map.on('moveend', () => this.onMapMoveEnd());\n      this.map.on('zoomend', () => this.onMapMoveEnd());\n      // Try to get user's location\n      this.geolocationService.getCurrentPosition().subscribe({\n        next: position => {\n          this.map.setView([position.lat, position.lng], 13);\n          this.loadLandmarks();\n        },\n        error: error => {\n          console.log('Geolocation failed:', error);\n          this.loadLandmarks(); // Load landmarks anyway with default location\n        }\n      });\n    }\n    setupEventListeners() {\n      // Additional event listeners can be added here\n    }\n    onMapMoveEnd() {\n      if (!this.isLoading) {\n        this.loadLandmarks();\n      }\n    }\n    loadLandmarks() {\n      if (this.isLoading) return;\n      this.isLoading = true;\n      this.isLoadingVisible = true;\n      const bounds = this.map.getBounds();\n      const landmarkBounds = {\n        north: bounds.getNorth(),\n        south: bounds.getSouth(),\n        east: bounds.getEast(),\n        west: bounds.getWest()\n      };\n      this.landmarksService.getLandmarks(landmarkBounds).subscribe({\n        next: response => {\n          this.displayLandmarks(response.landmarks);\n          this.isLoading = false;\n          this.isLoadingVisible = false;\n        },\n        error: error => {\n          console.error('Error loading landmarks:', error);\n          this.showError('Failed to load landmarks: ' + error.message);\n          this.isLoading = false;\n          this.isLoadingVisible = false;\n        }\n      });\n    }\n    displayLandmarks(landmarks) {\n      // Clear existing markers\n      this.markersGroup.clearLayers();\n      this.currentLandmarks = landmarks;\n      // Update landmark count\n      this.landmarkCount = landmarks.length;\n      this.landmarkCountChanged.emit(landmarks.length);\n      landmarks.forEach(landmark => {\n        const marker = this.createLandmarkMarker(landmark);\n        this.markersGroup.addLayer(marker);\n      });\n    }\n    createLandmarkMarker(landmark) {\n      const marker = L.marker([landmark.lat, landmark.lon]);\n      // Create popup content\n      const popupContent = this.createPopupContent(landmark);\n      marker.bindPopup(popupContent, {\n        maxWidth: 300,\n        className: 'landmark-popup'\n      });\n      return marker;\n    }\n    createPopupContent(landmark) {\n      const thumbnail = landmark.thumbnail ? `<img src=\"${landmark.thumbnail}\" class=\"img-fluid rounded mb-2\" alt=\"${landmark.title}\" style=\"max-height: 150px;\">` : '';\n      const description = landmark.description || 'No description available.';\n      const truncatedDescription = description.length > 200 ? description.substring(0, 200) + '...' : description;\n      return `\n      <div class=\"landmark-popup-content\">\n        <h6 class=\"fw-bold mb-2\">${landmark.title}</h6>\n        ${thumbnail}\n        <p class=\"small mb-2\">${truncatedDescription}</p>\n        <a href=\"${landmark.url}\" target=\"_blank\" class=\"btn btn-sm btn-outline-primary\">\n          <i class=\"fas fa-external-link-alt me-1\"></i>\n          Read more on Wikipedia\n        </a>\n      </div>\n    `;\n    }\n    onLocationFound(position) {\n      this.map.setView([position.lat, position.lng], 15);\n    }\n    onRefreshRequested() {\n      this.loadLandmarks();\n    }\n    showError(message) {\n      this.errorMessage = message;\n      this.isErrorVisible = true;\n      // Auto-hide after 5 seconds\n      setTimeout(() => {\n        this.isErrorVisible = false;\n      }, 5000);\n    }\n    onErrorOccurred(message) {\n      this.showError(message);\n    }\n    static {\n      this.ɵfac = function MapComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || MapComponent)(i0.ɵɵdirectiveInject(i1.LandmarksService), i0.ɵɵdirectiveInject(i2.GeolocationService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: MapComponent,\n        selectors: [[\"app-map\"]],\n        viewQuery: function MapComponent_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(_c0, 7);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mapContainer = _t.first);\n          }\n        },\n        outputs: {\n          landmarkCountChanged: \"landmarkCountChanged\"\n        },\n        decls: 9,\n        vars: 3,\n        consts: [[\"mapContainer\", \"\"], [1, \"position-relative\", \"map-container\"], [1, \"map\"], [1, \"map-controls\", \"position-absolute\", \"top-0\", \"end-0\", \"m-3\"], [\"role\", \"group\", 1, \"btn-group-vertical\"], [\"title\", \"Refresh landmarks\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"fas\", \"fa-sync-alt\"], [3, \"isVisible\"], [3, \"isVisible\", \"message\"]],\n        template: function MapComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            const _r1 = i0.ɵɵgetCurrentView();\n            i0.ɵɵelementStart(0, \"div\", 1);\n            i0.ɵɵelement(1, \"div\", 2, 0);\n            i0.ɵɵelementStart(3, \"div\", 3)(4, \"div\", 4)(5, \"button\", 5);\n            i0.ɵɵlistener(\"click\", function MapComponent_Template_button_click_5_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.onRefreshRequested());\n            });\n            i0.ɵɵelement(6, \"i\", 6);\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵelement(7, \"app-loading-overlay\", 7)(8, \"app-error-alert\", 8);\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(7);\n            i0.ɵɵproperty(\"isVisible\", ctx.isLoadingVisible);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"isVisible\", ctx.isErrorVisible)(\"message\", ctx.errorMessage);\n          }\n        },\n        encapsulation: 2\n      });\n    }\n  }\n  return MapComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}